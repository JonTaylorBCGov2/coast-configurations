#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of TheOrgBook environment.

  Usage:
    $0 [options] [commands]

  Example:
    $0 -P -e test resetDatabase
    - This will reset the database in TheOrgBook's TEST environment.

  Options:
  ========
    -s <ResourceSuffix>; The suffix used to identify the resource instances.
      - Defaults to '${resourceSuffix}'

  Commands:
  ========
    resetDatabase
      - Drop and recreate the database.
      - Rebuild search indexes.

    deleteDatabase
      - Deletes all databases off a pod and recycles the pod leaving it in a clean state.
      - Useful when database credentials change.

    # hardReset
    #   - Delete the persistent indy wallet information.
    #   - Drop and recreate the database.
    #   - Rebuild search indexes.
    #   - Register the environment's DID with the ledger.

    resetSearchIndex
      - Delete and recreate the search index for a given environment.

    resetSolrCore
      - Delete and recreate the search-engine core for a given environment.

    rebuildSearchIndex
      - Rebuild the search index for a given environment.

    updateSearchIndex
      - Update the search index for a given environment.
      - Supports passing arguments to updateSearchIndex.sh.  For example:
          $0 -p bc -e dev updateSearchIndex -b 500 -s 2019-07-04T00:00:00

    indexSynced
      - Check to see if the search-engine indexes are syned with the database credentials.

    scaleUp
      - Scale up one or more pods.
        For example;
          $0 -e dev scaleUp api

    scaleDown
      - Scale down one or more pods.
        For example;
          $0 -e dev scaleDown api

    recycle
      - Recycle one or more pods.
        For example;
          $0 -e dev recycle api

EOF
}

# -----------------------------------------------------------------------------------------------------------------
# Defaults:
# -----------------------------------------------------------------------------------------------------------------
resourceSuffix="${resourceSuffix:--indy-cat}"
# -----------------------------------------------------------------------------------------------------------------

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :s: FLAG; then
    case ${FLAG} in
      # List of local options:
      s ) resourceSuffix=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
function resetDatabase() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echoError "\resetDatabase; You MUST specify the names of the database and api pods.\n"
    exit 1
  fi

  dropAndRecreateDatabaseWithMigrations ${_apiPodName}${resourceSuffix} ${_dbPodName}${resourceSuffix}
  rebuildSearchIndex ${_apiPodName}${resourceSuffix}
  echoWarning "\nThe project's database has been reset."
}

function deleteDatabase() {
  _dbPodName=${1}
  if [ -z "${_dbPodName}" ]; then
    echoError "\nresetDatabase; You MUST specify a pod name.\n"
    exit 1
  fi

  printAndAskToContinue "If you contiune all of the databases on ${_dbPodName}${resourceSuffix} will be deleted.  All data will be lost."
  deleteAndRecreateDatabase ${_dbPodName}${resourceSuffix}
  echoWarning "\nThe databases on ${_dbPodName}${resourceSuffix} have been deleted."
}

# This function needs to be rethought and refactored to support the indy-cat changes.
# ===================================================================================
# hardReset() {
#   _apiPodName=${1}
#   _dbPodName=${2}
#   _walletDbPodName=${3}
#   if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ] || [ -z "${_walletDbPodName}" ]; then
#     echo -e \\n"resetDatabase; Missing parameter!"\\n
#     exit 1
#   fi

#   printAndWait "If you are using GreenLight, use the GreenLight manage script to reset the GreenLight pods.\nWait for all of the pods to completely shut down before continuing."

#   switchProject
#   exitOnError

#   # Scale down the API pod ...
#   scaleDown ${_apiPodName}
#   exitOnError
#   printAndWait "Wait for the ${_apiPodName} pod to completely shut down before continuing."

#   # Drop and recreate the application database ...
#   dropAndRecreatedbDatabase ${_dbPodName}
#   exitOnError

#   # Drop the wallet databases ...
#   if podExists ${_walletDbPodName}; then
#     deleteAndRecreateDatabase ${_walletDbPodName}
#     exitOnError
#   fi

#   # Bring the API pod back up ...
#   printAndWait "If you are resetting the ledger, wait for the ledger to completely start up before continuing."
#   scaleUp ${_apiPodName}
#   exitOnError
#   printAndWait "Wait for the ${_apiPodName} pod to completely start up before continuing."

#   rebuildSearchIndex ${_apiPodName}

#   echoWarning "\nThe project's database and indy wallets have been reset."
#   echoWarning "If you are using GreenLight, use the GreenLight manage script to scale the GreenLight pods up."
# }

resetSearchIndex() {
  _apiPodName=${1}
  _solrPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_solrPodName}" ]; then
    echo -e \\n"resetSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  deleteSearchIndex "${_solrPodName}${resourceSuffix}"
  recyclePods "${_solrPodName}${resourceSuffix}"
  printAndWait "Wait for the ${_solrPodName}${resourceSuffix} pod to completely start up before continuing."
  rebuildSearchIndex "${_apiPodName}${resourceSuffix}"
}

function resetSolrCore() {
  _apiPodName=${1}
  _solrPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_solrPodName}" ]; then
    echoError \\n"resetSolrCore; Missing parameter!"\\n
    exit 1
  fi

  deleteSolrCore "${_solrPodName}${resourceSuffix}"
  recyclePods "${_solrPodName}${resourceSuffix}"
  printAndWait "Wait for the ${_solrPodName}${resourceSuffix} pod to completely start up before continuing."
  rebuildSearchIndex "${_apiPodName}${resourceSuffix}"
}

function deleteSolrCore() {
  _solrPodName=${1}
  if [ -z "${_solrPodName}" ]; then
    echoError \\n"deleteSolrCore; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the search-engine core on ${_solrPodName}${resourceSuffix} will be deleted."
  deleteFromPod "${_solrPodName}${resourceSuffix}" "/opt/solr/server/solr/mycores/the_org_book"
  exitOnError
}

function deleteSearchIndex() {
  _solrPodName=${1}
  if [ -z "${_solrPodName}" ]; then
    echoError \\n"deleteSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the search index on ${_solrPodName}${resourceSuffix} will be deleted."
  deleteFromPod "${_solrPodName}${resourceSuffix}" "/opt/solr/server/solr/mycores/the_org_book/data/index"
  exitOnError
}

function rebuildSearchIndex() {
  _apiPodName=${1}
  if [ -z "${_apiPodName}" ]; then
    echoError \\n"rebuildSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  echoWarning "\nRebuilding the search index ..."
  echoWarning "The command may start interactively in the pod.  Please answer 'y' to the question if you are prompted."
  runInContainerInteractively ${_apiPodName}${resourceSuffix} './rebuildSearchIndex.sh'
  exitOnError
}

function updateSearchIndex() {
  (
    local OPTIND
    local OPTARG
    unset local args
    while getopts s:b: FLAG; do
      case $FLAG in
        * ) args="${args} -${FLAG} ${OPTARG}"
          ;;
      esac
    done
    shift $((OPTIND-1))

    _apiPodName=${1:-api}
    if [ -z "${_apiPodName}" ]; then
      echoError \\n"updateSearchIndex; Missing parameter!"\\n
      exit 1
    fi

    echoWarning "\nUpdating the search index ..."
    args="$(echo "${args}" | sed -e 's/^[[:space:]]*//')"
    runInContainer ${_apiPodName}${resourceSuffix} "./updateSearchIndex.sh ${args}"
  )
}

function indexSynced() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echoError \\n"rebuildSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  indexInfo=$(runInContainer "${_apiPodName}${resourceSuffix}" \
    "curl -s http://search-engine${resourceSuffix}:8983/solr/the_org_book/admin/luke?wt=json&show=index&numTerms=0")
  indexCount=$(echo ${indexInfo} | sed 's~\(.*"numDocs":\)\([[:digit:]]\+\).*~\2~')
  actualCount=$(runInContainer ${_dbPodName}${resourceSuffix} \
    'psql -d ${POSTGRESQL_DATABASE} -t -c "select count(*) from credential;"')
  indexDiff=$(( ${actualCount} - ${indexCount} ))

  if (( ${indexCount} == ${actualCount} )); then
    synced="true"
  else
    synced="false - Difference: ${indexDiff}"
  fi

  echo
  echo "Indexes Synced: ${synced}"
  echo "Indexed Credentials: ${indexCount}"
  echo "Actual Credentials: ${actualCount}"
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  resetdatabase)
    apiPodName=${1:-api}
    dbPodName=${2:-db}
    resetDatabase "${apiPodName}" "${dbPodName}"
    ;;
  deletedatabase)
    dbPodName=${1}
    deleteDatabase "${dbPodName}"
    ;;
  # hardreset)
  #   apiPodName=${1:-api}
  #   dbPodName=${2:-db}
  #   walletDbPodName=${3:-wallet-db}
  #   hardReset "${apiPodName}" "${dbPodName}" "${walletDbPodName}"
  #   ;;
  resetsearchindex)
    apiPodName=${1:-api}
    solrPodName=${2:-search-engine}
    resetSearchIndex "${apiPodName}" "${solrPodName}"
    ;;
  resetsolrcore)
    apiPodName=${1:-api}
    solrPodName=${2:-search-engine}
    resetSolrCore "${apiPodName}" "${solrPodName}"
    ;;
  rebuildsearchindex)
    apiPodName=${1:-api}
    rebuildSearchIndex "${apiPodName}"
    ;;
  updatesearchindex)
    updateSearchIndex ${@}
    ;;
  indexsynced)
    apiPodName=${1:-api}
    dbPodName=${2:-db}
    indexSynced "${apiPodName}" "${dbPodName}"
    ;;

  scaleup)
    scaleUp ${@}
    ;;
  scaledown)
    scaleDown ${@}
    ;;
  recycle)
    recyclePods ${@}
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null