{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "${NAME}${SUFFIX}-deployment-template",
    "annotations": {
      "description": "Deployment template for a django server connected to a PostGreSQL database.",
      "tags": "django",
      "iconClass": "icon-python"
    }
  },
  "objects": [
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${NAME}${SUFFIX}",
        "annotations": {
          "description": "Defines how to deploy the application server"
        },
        "labels": {
          "name": "${NAME}${SUFFIX}",
          "app": "${APP_NAME}${SUFFIX}",
          "app-group": "${APP_GROUP}"
        }
      },
      "spec": {
        "strategy": {
          "type": "Rolling"
        },
        "triggers": [
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${NAME}${SUFFIX}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "namespace": "${IMAGE_NAMESPACE}",
                "name": "${NAME}:${TAG_NAME}"
              }
            }
          },
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${NAME}${SUFFIX}"
        },
        "template": {
          "metadata": {
            "name": "${NAME}${SUFFIX}",
            "labels": {
              "name": "${NAME}${SUFFIX}",
              "app": "${APP_NAME}${SUFFIX}",
              "app-group": "${APP_GROUP}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "${NAME}${SUFFIX}",
                "image": " ",
                "ports": [
                  {
                    "containerPort": 8080,
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "failureThreshold": 5,
                  "periodSeconds": 30,
                  "initialDelaySeconds": 3,
                  "timeoutSeconds": 20,
                  "httpGet": {
                    "path": "/health",
                    "port": 8080
                  }
                },
                "livenessProbe": {
                  "failureThreshold": 5,
                  "periodSeconds": 60,
                  "initialDelaySeconds": 30,
                  "timeoutSeconds": 20,
                  "httpGet": {
                    "path": "/health",
                    "port": 8080
                  }
                },
                "env": [
                  {
                    "name": "DATABASE_SERVICE_NAME",
                    "value": "${DATABASE_SERVICE_NAME}${SUFFIX}"
                  },
                  {
                    "name": "DATABASE_ENGINE",
                    "value": "${DATABASE_ENGINE}"
                  },
                  {
                    "name": "DATABASE_NAME",
                    "value": "${DATABASE_NAME}"
                  },
                  {
                    "name": "DATABASE_USER",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${DATABASE_DEPLOYMENT_NAME}${SUFFIX}",
                        "key": "database-user"
                      }
                    }
                  },
                  {
                    "name": "DATABASE_PASSWORD",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${DATABASE_DEPLOYMENT_NAME}${SUFFIX}",
                        "key": "database-password"
                      }
                    }
                  },
                  {
                    "name": "WALLET_TYPE",
                    "value": "${WALLET_TYPE}"
                  },
                  {
                    "name": "POSTGRESQL_WALLET_HOST",
                    "value": "${POSTGRESQL_WALLET_HOST}${SUFFIX}"
                  },
                  {
                    "name": "POSTGRESQL_WALLET_PORT",
                    "value": "${POSTGRESQL_WALLET_PORT}"
                  },
                  {
                    "name": "POSTGRESQL_WALLET_USER",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${POSTGRESQL_WALLET_HOST}${SUFFIX}",
                        "key": "database-user"
                      }
                    }
                  },
                  {
                    "name": "POSTGRESQL_WALLET_PASSWORD",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${POSTGRESQL_WALLET_HOST}${SUFFIX}",
                        "key": "database-password"
                      }
                    }
                  },
                  {
                    "name": "POSTGRESQL_WALLET_ADMIN_PASSWORD",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${POSTGRESQL_WALLET_HOST}${SUFFIX}",
                        "key": "admin-password"
                      }
                    }
                  },
                  {
                    "name": "WALLET_ENCRYPTION_KEY",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${WALLET_CREDENTIAL_STORE_NAME}${SUFFIX}",
                        "key": "key"
                      }
                    }
                  },
                  {
                    "name": "INDY_WALLET_SEED",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${WALLET_CREDENTIAL_STORE_NAME}${SUFFIX}",
                        "key": "seed"
                      }
                    }
                  },
                  {
                    "name": "INDY_WALLET_DID",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${WALLET_CREDENTIAL_STORE_NAME}${SUFFIX}",
                        "key": "did"
                      }
                    }
                  },
                  {
                    "name": "APP_FILE",
                    "value": "${APP_FILE}"
                  },
                  {
                    "name": "APP_CONFIG",
                    "value": "${APP_CONFIG}"
                  },
                  {
                    "name": "DJANGO_SECRET_KEY",
                    "value": "${DJANGO_SECRET_KEY}"
                  },
                  {
                    "name": "DJANGO_DEBUG",
                    "value": "${DJANGO_DEBUG}"
                  },
                  {
                    "name": "SOLR_SERVICE_NAME",
                    "value": "${SOLR_SERVICE_NAME}"
                  },
                  {
                    "name": "SOLR_CORE_NAME",
                    "value": "${SOLR_CORE_NAME}"
                  },
                  {
                    "name": "SKIP_INDEXING_ON_STARTUP",
                    "value": "${SKIP_INDEXING_ON_STARTUP}"
                  },
                  {
                    "name": "ENABLE_REALTIME_INDEXING",
                    "value": "${ENABLE_REALTIME_INDEXING}"
                  },
                  {
                    "name": "ENABLE_SUGGESTER_REBUILD",
                    "value": "${ENABLE_SUGGESTER_REBUILD}"
                  },
                  {
                    "name": "GENESIS_URL",
                    "value": "${GENESIS_URL}"
                  },
                  {
                    "name": "LEDGER_URL",
                    "value": "${LEDGER_URL}"
                  },
                  {
                    "name": "LEDGER_PROTOCOL_VERSION",
                    "value": "${LEDGER_PROTOCOL_VERSION}"
                  },
                  {
                    "name": "AUTO_REGISTER_DID",
                    "value": "${AUTO_REGISTER_DID}"
                  },
                  {
                    "name": "TOB_THEME",
                    "value": "${TOB_THEME}"
                  },
                  {
                    "name": "APPLICATION_URL",
                    "value": "${APPLICATION_URL}"
                  },
                  {
                    "name": "DEMO_SITE",
                    "value": "${DEMO_SITE}"
                  },
                  {
                    "name": "APP_SCRIPT",
                    "value": "${APP_SCRIPT}"
                  },
                  {
                    "name": "RABBITMQ_USER",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${RABBITMQ_SVC_NAME}${SUFFIX}",
                        "key": "default-user"
                      }
                    }
                  },
                  {
                    "name": "RABBITMQ_PASSWORD",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "${RABBITMQ_SVC_NAME}${SUFFIX}",
                        "key": "default-password"
                      }
                    }
                  }
                ],
                "resources": {
                  "requests": {
                    "cpu": "${CPU_REQUEST}",
                    "memory": "${MEMORY_REQUEST}"
                  },
                  "limits": {
                    "cpu": "${CPU_LIMIT}",
                    "memory": "${MEMORY_LIMIT}"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "kind": "HorizontalPodAutoscaler",
      "apiVersion": "autoscaling/v1",
      "metadata": {
        "name": "${NAME}${SUFFIX}",
        "labels": {
          "name": "${NAME}${SUFFIX}",
          "app": "${APP_NAME}${SUFFIX}",
          "app-group": "${APP_GROUP}"
        }
      },
      "spec": {
        "scaleTargetRef": {
          "kind": "DeploymentConfig",
          "name": "${NAME}${SUFFIX}"
        },
        "minReplicas": 2,
        "maxReplicas": 6
      }
    }
  ],
  "parameters": [
    {
      "name": "NAME",
      "displayName": "Name",
      "description": "The name assigned to all of the OpenShift resources associated to the server instance.",
      "required": true,
      "value": "worker"
    },
    {
      "name": "SUFFIX",
      "displayName": "Suffix",
      "description": "A name suffix used for all objects",
      "required": false,
      "value": "-indy-cat"
    },
    {
      "name": "APP_NAME",
      "displayName": "App Name",
      "description": "Used to group components together in the OpenShift console.",
      "required": true,
      "value": "OrgBook"
    },
    {
      "name": "APP_GROUP",
      "displayName": "App Group",
      "description": "The name assigned to all of the deployments in this project.",
      "required": true,
      "value": "indy-catalyst"
    },
    {
      "name": "IMAGE_NAMESPACE",
      "displayName": "Image Namespace",
      "required": true,
      "description": "The namespace of the OpenShift project containing the imagestream for the application.",
      "value": "devex-von-tools"
    },
    {
      "name": "DATABASE_SERVICE_NAME",
      "displayName": "Database Service Name",
      "description": "The name of the database server/service.",
      "required": true,
      "value": "db"
    },
    {
      "name": "DATABASE_ENGINE",
      "displayName": "Database Engine",
      "required": true,
      "description": "Database engine: postgresql, mysql, or sqlite (default).",
      "value": "postgresql"
    },
    {
      "name": "DATABASE_NAME",
      "displayName": "Database Name",
      "required": true,
      "description": "Name of the deployed database (see environment variables in deployed database).",
      "value": "TheOrgBook_Database"
    },
    {
      "name": "WALLET_TYPE",
      "displayName": "Wallet Storage Type",
      "description": "The wallet storage type.  Your choice of 'postgres' or 'sqlite' at the moment.  If not defined, defaults to 'sqlite' for compatibility",
      "required": false,
      "value": "postgres_storage"
    },
    {
      "name": "POSTGRESQL_WALLET_HOST",
      "displayName": "PostgreSql Wallet Hostname",
      "required": true,
      "description": "Hostname of the deployed database hosting the wallet.  Only used when WALLET_TYPE = postgres_storage.",
      "value": "wallet"
    },
    {
      "name": "POSTGRESQL_WALLET_PORT",
      "displayName": "PostgreSql Wallet Port",
      "required": true,
      "description": "The port number of the deployed database hosting the wallet.  Only used when WALLET_TYPE = postgres_storage.",
      "value": "5432"
    },
    {
      "name": "WALLET_CREDENTIAL_STORE_NAME",
      "displayName": "Wallet Credential Store Name",
      "description": "The name of the wallet credential store (aka The name of the secret that contains the wallet credentials).",
      "required": true,
      "value": "wallet-credentials"
    },
    {
      "name": "APP_FILE",
      "displayName": "Application File",
      "description": "Used to run the application from a Python script. This should be a path to a Python file (defaults to app.py unless set to null) that will be passed to the Python interpreter to start the application (optional).",
      "value": "app-vonx.py"
    },
    {
      "name": "APP_CONFIG",
      "displayName": "Application Configuration File Path",
      "description": "Relative path to Gunicorn configuration file (optional)."
    },
    {
      "name": "DJANGO_SECRET_KEY",
      "displayName": "Django Secret Key",
      "description": "Set this to a long random string.",
      "generate": "expression",
      "from": "[\\w]{50}"
    },
    {
      "name": "DJANGO_DEBUG",
      "displayName": "Django Debug",
      "description": "If Django is in debug mode",
      "required": true,
      "value": "False"
    },
    {
      "name": "SOLR_SERVICE_NAME",
      "displayName": "SOLR Service Name",
      "description": "The name of the service associated with the SOLR search engine.",
      "required": false,
      "value": "search-engine"
    },
    {
      "name": "SOLR_CORE_NAME",
      "displayName": "SOLR Core Name",
      "description": "The name of the core to use when connecting with SOLR.",
      "required": false,
      "value": "the_org_book"
    },
    {
      "name": "SKIP_INDEXING_ON_STARTUP",
      "displayName": "Skip Indexing On Startup",
      "description": "Set this flag to `true` to skip indexing on startup as part of the database migration; set to `all` to skip indexing and suggester build, set to `false` otherwise.  When there are a large number of records to index, indexing at startup can cause startup delays and issues.",
      "required": true,
      "value": "all"
    },
    {
      "name": "ENABLE_REALTIME_INDEXING",
      "displayName": "Enable Realtime Indexing",
      "description": "Flag to enable/disable realtime search indexing.  Set to 1 to enable, leave it blank to disable.  Having realtime indexing enabled during onboarding can cause performance issues.",
      "required": false,
      "value": "1"
    },
    {
      "name": "ENABLE_SUGGESTER_REBUILD",
      "displayName": "Enable Suggester Rebuild",
      "description": "Flag to enable/disable search suggester rebuilding.  Set to 1 to enable, leave it blank to disable.  Having this enabled can cause issues with very large data-sets.",
      "required": false,
      "value": ""
    },
    {
      "name": "TAG_NAME",
      "displayName": "Environment TAG name",
      "description": "The TAG name for this environment, e.g., dev, test, prod",
      "value": "dev",
      "required": true
    },
    {
      "name": "DATABASE_DEPLOYMENT_NAME",
      "displayName": "Database Deployment Name",
      "description": "The name associated to the database deployment resources.  In particular, this is used to wire up the credentials associated to the database.",
      "required": true,
      "value": "db"
    },
    {
      "name": "GENESIS_URL",
      "displayName": "Genesis Url",
      "description": "URL for downloading a copy of the genesis file defining the ledger connection for the environment.  Used when connecting the the Sovrin Ledger.",
      "required": false,
      "value": ""
    },
    {
      "name": "LEDGER_URL",
      "displayName": "VON network ledger url.",
      "description": "URL for a running instance of the von-network.  Used when connecting to the BCovrin Ledger.",
      "required": false,
      "value": "http://dev.bcovrin.vonx.io"
    },
    {
      "name": "LEDGER_PROTOCOL_VERSION",
      "displayName": "Ledger Protocol Version",
      "description": "Used to specify the protocol version for the ledger.  Defaults if left blank.",
      "required": false,
      "value": ""
    },
    {
      "name": "AUTO_REGISTER_DID",
      "displayName": "Auto Register DID",
      "description": "Flag to indicate whether or not to auto-register with the ledger.  Only works with the BCovrin, which has an endpoint for self registration.",
      "required": false,
      "value": "1"
    },
    {
      "name": "TOB_THEME",
      "displayName": "TheOrgBook Theme",
      "description": "The theme to use for the tob-api.  This defines which customizations to load for the application.",
      "required": true,
      "value": "bcgov"
    },
    {
      "name": "APPLICATION_URL",
      "displayName": "Application url",
      "description": "This service's url.",
      "required": true,
      "value": "https://orgbook.gov.bc.ca"
    },
    {
      "name": "DEMO_SITE",
      "displayName": "Demo Site Flag",
      "description": "Set to True to indicate the site is a Demo site, False otherwise.",
      "required": false,
      "value": "True"
    },
    {
      "name": "APP_SCRIPT",
      "displayName": "Application Script",
      "description": "The start-up script for the application.",
      "required": true,
      "value": "start-celery-worker.sh"
    },
    {
      "name": "RABBITMQ_SVC_NAME",
      "displayName": "RabbitMQ Service Name",
      "description": "The name of the RabbitMQ service.",
      "required": true,
      "value": "ms-queue"
    },
    {
      "name": "CPU_REQUEST",
      "displayName": "Resources CPU Request",
      "description": "The resources CPU request (in cores) for this build.",
      "required": true,
      "value": "10m"
    },
    {
      "name": "CPU_LIMIT",
      "displayName": "Resources CPU Limit",
      "description": "The resources CPU limit (in cores) for this build.",
      "required": true,
      "value": "750m"
    },
    {
      "name": "MEMORY_REQUEST",
      "displayName": "Resources Memory Request",
      "description": "The resources Memory request (in Mi, Gi, etc) for this build.",
      "required": true,
      "value": "10Mi"
    },
    {
      "name": "MEMORY_LIMIT",
      "displayName": "Resources Memory Limit",
      "description": "The resources Memory limit (in Mi, Gi, etc) for this build.",
      "required": true,
      "value": "512Mi"
    }
  ]
}